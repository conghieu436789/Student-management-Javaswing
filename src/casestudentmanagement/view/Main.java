/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package casestudentmanagement.view;

import Control.FileProcess;
import casestudentmanagement.model.ComparatorGrade;
import casestudentmanagement.model.ComparatorName;
import casestudentmanagement.model.Student;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.KeyEvent;
/**
 *
 * @author Hieu
 */
public class Main extends javax.swing.JDialog {
    ArrayList<Student> studentList;
    DefaultTableModel model;
    String filePath = "StudentManagement.dat";
    private int selectedIndex;
    Login login;
    Add addFrm;
    Edit editFrm;
    private String user;

    public String getUser() {
        return user;
    }

    public void setUser(String user) {
        this.user = user;
    }
    /**
     * Creates new form Main
     */
    
    

    public Main(java.awt.Frame parent, boolean modal, String user) {
        super(parent, modal);
        initComponents();
        login = (Login) parent;
        setLocationRelativeTo(null);
        model = (DefaultTableModel) jTable1.getModel();
//        model.setColumnIdentifiers(new Object[] {
//            "Order", "ID", "Name", "Birth day", "Email", "Address", "Grade"
//        });
        
        if (FileProcess.getFile(filePath) == null) {
            studentList = new ArrayList<Student>();
        } else {
            studentList = (ArrayList<Student>) FileProcess.getFile(filePath);
            showResult();
        }
        
        if (user!=null) {
            lbUser.setText(user);
        }
       
        //        login = (Login) parent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        pnTop = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lbUser = new javax.swing.JLabel();
        btLogout = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btAdd = new javax.swing.JButton();
        btEdit = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();
        btSort = new javax.swing.JButton();
        cbSort = new javax.swing.JComboBox<>();
        cbSearch = new javax.swing.JComboBox<>();
        txtSearchBy = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Student Management");

        pnTop.setBackground(new java.awt.Color(0, 153, 153));

        jLabel2.setFont(new java.awt.Font(".VnArialH", 3, 22)); // NOI18N
        jLabel2.setText("Student management");

        lbUser.setFont(new java.awt.Font(".VnArialH", 3, 10)); // NOI18N
        lbUser.setForeground(new java.awt.Color(255, 255, 255));
        lbUser.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbUser.setText("User");

        btLogout.setFont(new java.awt.Font(".VnArialH", 0, 8)); // NOI18N
        btLogout.setText("Log out");
        btLogout.setActionCommand("btLogout");
        btLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnTopLayout = new javax.swing.GroupLayout(pnTop);
        pnTop.setLayout(pnTopLayout);
        pnTopLayout.setHorizontalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTopLayout.createSequentialGroup()
                        .addComponent(lbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btLogout)
                        .addGap(2, 2, 2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTopLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(269, 269, 269))))
        );
        pnTopLayout.setVerticalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTopLayout.createSequentialGroup()
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTopLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtSearch.setFont(new java.awt.Font(".VnArial", 0, 12)); // NOI18N
        txtSearch.setForeground(new java.awt.Color(0, 0, 255));
        txtSearch.setToolTipText("Search here");
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "ID", "Name", "BirthDay", "Email", "Address", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(3);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(15);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(10);
        }

        btAdd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btAdd.setMnemonic(KeyEvent.VK_A);
        btAdd.setText("ADD");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btEdit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btEdit.setMnemonic(KeyEvent.VK_E);
        btEdit.setText("EDIT");
        btEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditActionPerformed(evt);
            }
        });

        btRemove.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btRemove.setMnemonic(KeyEvent.VK_R);
        btRemove.setText("REMOVE");
        btRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveActionPerformed(evt);
            }
        });

        btSort.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btSort.setMnemonic(KeyEvent.VK_S);
        btSort.setText("SORT BY");
        btSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSortActionPerformed(evt);
            }
        });

        cbSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Grade" }));
        cbSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSortActionPerformed(evt);
            }
        });

        cbSearch.setForeground(new java.awt.Color(0, 0, 255));
        cbSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "ID" }));

        txtSearchBy.setFont(new java.awt.Font(".VnArialH", 1, 12)); // NOI18N
        txtSearchBy.setForeground(new java.awt.Color(0, 0, 255));
        txtSearchBy.setText("Search By");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnTop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btSort, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(txtSearchBy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchBy, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAdd)
                    .addComponent(btEdit)
                    .addComponent(btRemove)
                    .addComponent(btSort)
                    .addComponent(cbSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void showResult() {
        model.setRowCount(0);
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        int order=1;    
        for (Student student:studentList) {
            String birthDay = formatter.format(student.getBithDay());
            model.addRow(new Object[] {
            order++,student.getID(), student.getName(), birthDay,  student.getEmail(), student.getAddress(), student.getGrade()
           });
        } 
    }
    
    public void addStudent(Student student) {
        studentList.add(student);
        FileProcess.writeFile(studentList, filePath);
        showResult();
    }
    public void editStudent(Student student) {
        
        studentList.get(selectedIndex).setID(student.getID());
        studentList.get(selectedIndex).setLastName(student.getLastName());
        studentList.get(selectedIndex).setSurName(student.getSurName());
        studentList.get(selectedIndex).setAddress(student.getAddress());
        studentList.get(selectedIndex).setEmail(student.getEmail());
        studentList.get(selectedIndex).setBithDay(student.getBithDay());
        studentList.get(selectedIndex).setGrade(student.getGrade());
        FileProcess.writeFile(studentList, filePath);
        showResult();
    }
    
    
    private void btLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLogoutActionPerformed
       dispose();
       
       login.setVisible(true);
       
//       dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_btLogoutActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        addFrm = new Add(this, rootPaneCheckingEnabled);
        addFrm.setVisible(true);
//        addFrm.setLocationRelativeTo(null);
        // TODO add your handling code here:
    }//GEN-LAST:event_btAddActionPerformed

    private void btEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditActionPerformed
        selectedIndex = jTable1.getSelectedRow();
        if (studentList.size()==0) {
            JOptionPane.showMessageDialog(rootPane, "List is empty");
        } else if (selectedIndex ==-1) {
            JOptionPane.showMessageDialog(rootPane, "Select student to edit");
        } else {
            editFrm = new Edit(this, rootPaneCheckingEnabled);
            editFrm.setEditData(studentList.get(selectedIndex));
            editFrm.setVisible(true);
            
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btEditActionPerformed

    private void btRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveActionPerformed
        selectedIndex = jTable1.getSelectedRow();
            if (studentList.size()==0) {
                JOptionPane.showMessageDialog(rootPane, "List is empty");
            } else if (selectedIndex ==-1) {
                JOptionPane.showMessageDialog(rootPane, "Select student to edit");
            } else {
                int isOK = JOptionPane.showConfirmDialog(rootPane, "Do you want delete this student?");
                if (isOK==0) {
                    studentList.remove(selectedIndex);
                    FileProcess.writeFile(studentList, filePath);
                    showResult();
                }
              
            }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_btRemoveActionPerformed

    private void btSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSortActionPerformed
        String select = (String) cbSort.getSelectedItem();
        if (select==null) {
            select="Name";
        }
        if (select=="Name") {
            ComparatorName comparatorName = new ComparatorName();
            Collections.sort(studentList, comparatorName);
            showResult();
        } else if (select == "Grade") {
            ComparatorGrade comparatorGrade = new ComparatorGrade();
            Collections.sort(studentList, comparatorGrade);
            showResult();
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_btSortActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        String select = (String) cbSearch.getSelectedItem();
        if (select==null) {
            select="Name";
        }
        if (select=="Name") {
            String searchText = txtSearch.getText();
            if (searchText=="") {
                showResult();
            } else {
                model.setRowCount(0);
                for (Student student:studentList) {
                    int order=1;
                    if (student.getLastName().contains(searchText)) {
                        model.addRow(new Object[] {
                        order++,student.getID(), student.getName(), 
                            formatter.format(student.getBithDay()),  student.getEmail(), student.getAddress(), student.getGrade()           
                        });
                    }
                }
            }
        } else if (select == "ID") {
            String searchText = txtSearch.getText();
            if (searchText=="") {
                showResult();                
            } else {
                model.setRowCount(0);
                for (Student student:studentList) {
                    int order=1;
                    if (student.getID().contains(searchText)) {
                        model.addRow(new Object[] {
                        order++,student.getID(), student.getName(), 
                            formatter.format(student.getBithDay()),  student.getEmail(), student.getAddress(), student.getGrade()           
                        });
                    }
                }
            }
        }
        
            // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed

        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyPressed

    private void cbSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSortActionPerformed
        
    }//GEN-LAST:event_cbSortActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main dialog = new Main(new javax.swing.JFrame(), true, "admin");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btEdit;
    private javax.swing.JButton btLogout;
    private javax.swing.JButton btRemove;
    private javax.swing.JButton btSort;
    private javax.swing.JComboBox<String> cbSearch;
    private javax.swing.JComboBox<String> cbSort;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbUser;
    private javax.swing.JPanel pnTop;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JLabel txtSearchBy;
    // End of variables declaration//GEN-END:variables
}
